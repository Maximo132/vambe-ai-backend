[alembic]
# Ruta a los scripts de migración
script_location = alembic_migrations

# Plantilla para generar archivos de migración
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d%%(second).2d_%%(rev)s_%%(slug)s

# Configuración de la base de datos
# La URL se obtiene de la configuración de la aplicación
# Para operaciones normales (síncronas)
sqlalchemy.url = postgresql://postgres:postgres@localhost:5432/vambeai

# Para operaciones asíncronas (usar con run_sync)
sqlalchemy.async_url = postgresql+asyncpg://postgres:postgres@localhost:5432/vambeai

# Ubicación de los modelos SQLAlchemy
prepend_sys_path = .
version_path_separator = os

# Usar migraciones transaccionales
# (útil para bases de datos que soportan DDL transaccional)
transactional_ddl = true

# Configuración adicional
[post_write_hooks]
# Comandos a ejecutar después de generar una migración
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# options = -l 88 REVISION_SCRIPT_FILENAME

# Configuración para entornos de prueba
[test]
# Sobrescribe la configuración de la base de datos para pruebas
# La URL de prueba se puede configurar en el entorno
# o usar la misma que la base de datos principal
sqlalchemy.url = postgresql://postgres:postgres@localhost:5432/vambeai_test
sqlalchemy.async_url = postgresql+asyncpg://postgres:postgres@localhost:5432/vambeai_test

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console,file

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console,file
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = FileHandler
args = ('alembic.log', 'w')
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
